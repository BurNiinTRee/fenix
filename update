#!/usr/bin/env python3

import datetime, json, toml
from urllib.error import HTTPError
from urllib.request import urlopen

targets = [
    "aarch64-unknown-linux-gnu",
    "i686-unknown-linux-gnu",
    "x86_64-apple-darwin",
    "x86_64-unknown-linux-gnu",
]
std_targets = [
    "aarch64-apple-darwin",
    "aarch64-apple-ios",
    "aarch64-linux-android",
    "aarch64-pc-windows-msvc",
    "aarch64-unknown-fuchsia",
    "aarch64-unknown-linux-musl",
    "arm-linux-androideabi",
    "arm-unknown-linux-gnueabi",
    "arm-unknown-linux-gnueabihf",
    "arm-unknown-linux-musleabi",
    "arm-unknown-linux-musleabihf",
    "armv5te-unknown-linux-gnueabi",
    "armv7-linux-androideabi",
    "armv7-unknown-linux-gnueabihf",
    "armv7-unknown-linux-musleabihf",
    "asmjs-unknown-emscripten",
    "i586-pc-windows-msvc",
    "i586-unknown-linux-gnu",
    "i586-unknown-linux-musl",
    "i686-linux-android",
    "i686-pc-windows-gnu",
    "i686-pc-windows-msvc",
    "i686-unknown-freebsd",
    "i686-unknown-linux-musl",
    "mips-unknown-linux-gnu",
    "mips-unknown-linux-musl",
    "mips64-unknown-linux-gnuabi64",
    "mips64el-unknown-linux-gnuabi64",
    "mipsel-unknown-linux-gnu",
    "mipsel-unknown-linux-musl",
    "powerpc-unknown-linux-gnu",
    "powerpc64-unknown-linux-gnu",
    "powerpc64le-unknown-linux-gnu",
    "s390x-unknown-linux-gnu",
    "sparc64-unknown-linux-gnu",
    "sparcv9-sun-solaris",
    "wasm32-unknown-emscripten",
    "wasm32-unknown-unknown",
    "x86_64-apple-ios",
    "x86_64-linux-android",
    "x86_64-pc-windows-gnu",
    "x86_64-pc-windows-msvc",
    "x86_64-rumprun-netbsd",
    "x86_64-sun-solaris",
    "x86_64-unknown-freebsd",
    "x86_64-unknown-fuchsia",
    "x86_64-unknown-illumos",
    "x86_64-unknown-linux-gnux32",
    "x86_64-unknown-linux-musl",
    "x86_64-unknown-netbsd",
    "x86_64-unknown-redox",
]
results = { target: { "latest": {} } for target in targets + std_targets }
profiles = ["minimal", "default", "complete"]

dist_root = "https://static.rust-lang.org/dist"
one_day = datetime.timedelta(days = 1)

def f(d = None):
    date_path = f"/{d}" if d else ""

    try:
        resp = urlopen(f"{dist_root}{date_path}/channel-rust-nightly.toml")
    except HTTPError as e:
        if e.code == 404:
            f(d - one_day)
        else:
            raise e
    else:
        manifest = toml.loads(resp.read().decode("utf-8"))
        components = manifest["profiles"]
        date_str = manifest["date"]
        date = datetime.date.fromisoformat(date_str)
        pkgs = manifest["pkg"]
        skipped = False

        for target in std_targets:
            if not d: results[target]["latest"] = {
                "date": date_str,
                "components": {},
            }

            if "rust-std" in results[target]["latest"]["components"]: continue

            src = pkgs["rust-std"]["target"].get(target)
            if src and src["available"]:
                results[target]["latest"]["components"]["rust-std"] = {
                    "date": date_str,
                    "url": src["url"],
                    "sha256": src["hash"],
                }

        for target in targets:
            if not d: results[target]["latest"] = {
                "date": date_str,
                "components": {},
            }

            for component in components["complete"]:
                if component in results[target]["latest"]["components"]: continue

                pkg = pkgs[component]["target"]
                src = pkg.get("*") or pkg.get(target)
                if src and src["available"]:
                    results[target]["latest"]["components"][component] = {
                        "date": date_str,
                        "url": src["url"],
                        "sha256": src["hash"],
                    }

            for profile in profiles:
                if profile in results[target]: continue

                result = { "date": date_str, "components": {} }
                success = True

                for component in components[profile]:
                    pkg = pkgs[component]["target"]
                    src = pkg.get("*") or pkg.get(target)
                    if not src: continue

                    if src["available"]:
                        result["components"][component] = {
                            "url": src["url"],
                            "sha256": src["hash"],
                        }
                    else:
                        skipped = True
                        success = False
                        break

                if success:
                    results[target][profile] = result

        if skipped:
            f(date - one_day)

f()
json.dump(results, open("data/nightly.json", "w"))
